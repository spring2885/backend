{
  "swagger" : "2.0",
  "info" : {
    "description" : "An API for the Spring2885 FrontEnd.",
    "version" : "0.0.1",
    "title" : "NDNU Community Access API",
    "contact" : {
      "name" : "Spring2885 Backend Development Team",
      "url" : "https://github.com/spring2885/backend",
      "email" : "team@spring-2885.org"
    }
  },
  "tags" : [ {
    "name" : "User",
    "description" : "User API (internal)"
  }, {
    "name" : "Profiles",
    "description" : "Profiles API."
  }, {
    "name" : "Reset",
    "description" : "Password reset API."
  }, {
    "name" : "Jobs",
    "description" : "Jobs API."
  }, {
    "name" : "JobType",
    "description" : "JobType API (Admin)."
  }, {
    "name" : "News",
    "description" : "News API."
  }, {
    "name" : "SocialService",
    "description" : "SocialService API (Admin)."
  }, {
    "name" : "PersonType",
    "description" : "Person Type API (Admin)."
  }, {
    "name" : "Approvals",
    "description" : "Approvals API (Admin)"
  } ],
  "schemes" : [ "http", "https" ],
  "paths" : {
    "/api/v1/approvals/list" : {
      "get" : {
        "tags" : [ "Approvals" ],
        "summary" : "Lists approvals.",
        "description" : "Lists all approval requests. Optionally filtered by state and type.",
        "parameters" : [ {
          "name" : "state",
          "in" : "query",
          "description" : "The state of the request. Either *open* or *closed*",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The type of the request. Either *FACULTY* or *ABUSE*",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Submits verdict."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/api/v1/approvals/request/faculty" : {
      "post" : {
        "tags" : [ "Approvals" ],
        "summary" : "Requests approval as faculty",
        "description" : "Submits a request for an admin to approve this member as a faculty.",
        "parameters" : [ {
          "in" : "body",
          "name" : "TeacherRequest",
          "description" : "The faculty request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TeacherRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Submits request."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/api/v1/approvals/verdict" : {
      "post" : {
        "tags" : [ "Approvals" ],
        "summary" : "Submits a verdict on an approval request.",
        "description" : "Submits a verdict on a previously submitted approval request.",
        "parameters" : [ {
          "in" : "body",
          "name" : "Verdict",
          "description" : "The verdict.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Verdict"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Submits verdict."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/api/v1/jobs" : {
      "get" : {
        "tags" : [ "Jobs" ],
        "summary" : "Gets all job entries.",
        "description" : "Gets `Job` entries.\nOptional query param of **size** determines\nsize of returned array\n",
        "parameters" : [ {
          "name" : "size",
          "in" : "query",
          "description" : "Maximum number of items to fetch.\nIf unset then all items are fetched.\n",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Job"
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Jobs" ],
        "summary" : "Posts a new job entry.",
        "description" : "Posts a new job entry.",
        "parameters" : [ {
          "in" : "body",
          "name" : "Job",
          "description" : "The Job you want to post",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Job"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Make a new Job"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/api/v1/jobs/{id}" : {
      "get" : {
        "tags" : [ "Jobs" ],
        "summary" : "Gets a job entry.",
        "description" : "Gets a Job entry.\n",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "schema" : {
              "$ref" : "#/definitions/Job"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Jobs" ],
        "summary" : "Updates a job.\n",
        "description" : "Updates a job.\n",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "job",
          "description" : "The Job you want to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Job"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Updates the Job"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Jobs" ],
        "summary" : "Deletes a job entry.\n",
        "description" : "Deletes a job entry.\n",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Updates the person."
          },
          "500" : {
            "description" : "Error deleting the profile \"ID\"."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/api/v1/jobtype" : {
      "get" : {
        "tags" : [ "JobType" ],
        "summary" : "Gets all jobtype entries.",
        "description" : "Gets all JobType entries.\nOptional query param of **size** determines\nsize of return array\n",
        "parameters" : [ {
          "name" : "size",
          "in" : "query",
          "description" : "Maximum number of items to fetch.\nIf unset then all items are fetched.\n",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/JobType"
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "JobType" ],
        "summary" : "Creates a new jobtype.",
        "description" : "Creates a new JobType entry.",
        "parameters" : [ {
          "in" : "body",
          "name" : "JobType",
          "description" : "The JobType you want to post",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/JobType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Makes a new JobType"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/api/v1/jobtype/{id}" : {
      "get" : {
        "tags" : [ "JobType" ],
        "summary" : "Gets a jobtype entry.\n",
        "description" : "Gets a jobtype entry by id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Sucussful deletion",
            "schema" : {
              "$ref" : "#/definitions/JobType"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "JobType" ],
        "summary" : "Updates a jobtype entry.",
        "description" : "Updates a jobtype entry by id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "jobtype",
          "description" : "The jobtype item you want to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/JobType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deletes jobtype"
          },
          "500" : {
            "description" : "Error with deleting jobtype by id."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "JobType" ],
        "summary" : "Deletes a jobtype entry.\n",
        "description" : "Delete a jobtype entry by id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Deletes jobtype"
          },
          "500" : {
            "description" : "Error with deleting jobtype by id."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/api/v1/news" : {
      "get" : {
        "tags" : [ "News" ],
        "summary" : "Fetches all news.",
        "description" : "Gets `News` objects.\nOptional query param of **size** determines\nsize of return array\n",
        "parameters" : [ {
          "name" : "size",
          "in" : "query",
          "description" : "Maximum number of items to fetch.\nIf unset then all items are fetched.\n",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "admin",
          "in" : "query",
          "description" : "**True** if this is an admin request. \nAdmin requests are only allowed to be specified\nby admin users.  If a non-admin attempts to specifify\none then a 403 will be returned.\n",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "## Basic query string.\n### Format:\n  ```?q=search terms```\n\n### Example:\n  ```?q=Oracle```\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "aq",
          "in" : "query",
          "description" : "## Advanced query string.\n### Format:\n  ```?aq=(attribute OP term),...```\n\n### Example:\n  ```?aq=graduation_year>2000,occupation:manager```\n\n### Available OPs:\n  * ':' for equality\n  * '!' for not\n  * '>' greater than\n  * '<' less than\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/News"
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "News" ],
        "summary" : "Posts new news entry.",
        "description" : "Posts a new news entry.\n",
        "parameters" : [ {
          "in" : "body",
          "name" : "News",
          "description" : "The News you want to post",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/News"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Makes a new News"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/api/v1/news/{id}" : {
      "get" : {
        "tags" : [ "News" ],
        "summary" : "Gets a news entry.",
        "description" : "Retrives a news entry by id.\n",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Sucussful deletion",
            "schema" : {
              "$ref" : "#/definitions/News"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "News" ],
        "summary" : "Updates a news entry.\n",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "news",
          "description" : "The News item you want to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/News"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Updates News"
          },
          "500" : {
            "description" : "Error with updating News by id."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "News" ],
        "summary" : "Deletes a single news entry.\n",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Deletes News"
          },
          "500" : {
            "description" : "Error with deleting News by id."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/api/v1/news_comment" : {
      "post" : {
        "tags" : [ "News" ],
        "summary" : "Posts a news comment.",
        "description" : "Posts a new news comment.",
        "parameters" : [ {
          "in" : "body",
          "name" : "news_comment",
          "description" : "The news comment you want to post",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NewsComment"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Makes a new NewsComment"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/api/v1/news_comment/{id}" : {
      "get" : {
        "tags" : [ "News" ],
        "summary" : "Gets a news comment.",
        "description" : "Retrives the comments by id.\n",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "schema" : {
              "$ref" : "#/definitions/NewsComment"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "News" ],
        "summary" : "Updates a news comment.",
        "description" : "Updates a news comment by id.\n",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "news_comment",
          "description" : "The News comment you want to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NewsComment"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Updates the News Coment"
          },
          "500" : {
            "description" : "Error with updating News Comment by id."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "News" ],
        "summary" : "Deletes a news comment by id.\n",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Deletes News Comment"
          },
          "500" : {
            "description" : "Error with deleting News comment by id."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/api/v1/persontype" : {
      "get" : {
        "tags" : [ "PersonType" ],
        "summary" : "Fetches all persontype entries.\n",
        "description" : "Fetches all 'person type' objects. up to a 'size' if specified,\notherwise fetches all objects.\n",
        "parameters" : [ {
          "name" : "size",
          "in" : "query",
          "description" : "Maximum number of items to fetch.\nIf unset then all items are fetched.\n",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Gets persontypes",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PersonType"
              }
            }
          },
          "500" : {
            "description" : "Error getting persontypes"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "PersonType" ],
        "summary" : "Creates a new persontype.",
        "description" : "Creates a new persontype entry.",
        "parameters" : [ {
          "in" : "body",
          "name" : "PersonType",
          "description" : "The persontype you want to post",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PersonType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Creates a new persontype in the system"
          },
          "500" : {
            "description" : "Error creating persontype."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/api/v1/persontype/{id}" : {
      "get" : {
        "tags" : [ "PersonType" ],
        "summary" : "Gets a persontype entry.",
        "description" : "Gets a persontype entry.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "schema" : {
              "$ref" : "#/definitions/PersonType"
            }
          },
          "500" : {
            "description" : "error getting persontype with id 'id'"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "PersonType" ],
        "summary" : "Updates a persontype entry\n",
        "description" : "Updates a persontype entry.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "name",
          "description" : "The type to update.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PersonType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Updates the persontype."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "PersonType" ],
        "summary" : "Deletes a persontype entry.\n",
        "description" : "Deletes a persontype entry.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Deletes the persontype.",
            "schema" : {
              "$ref" : "#/definitions/PersonType"
            }
          },
          "500" : {
            "description" : "Error deleting the persontype \"ID\"."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/api/v1/profiles" : {
      "get" : {
        "tags" : [ "Profiles" ],
        "summary" : "Fetches all profiles\n",
        "description" : "Fetches all `profile` objects. up to `size` if specified,\notherwise fetches all objects.\n",
        "parameters" : [ {
          "name" : "size",
          "in" : "query",
          "description" : "Maximum number of items to fetch.\nIf unset then all items are fetched.\n",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "## Basic query string.\n### Format:\n  ```?q=search terms```\n\n### Example:\n  ```?q=Oracle```\n",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "aq",
          "in" : "query",
          "description" : "## Advanced query string.\n### Format:\n  ```?aq=(attribute OP term),...```\n\n### Example:\n  ```?aq=graduation_year>2000,occupation:manager```\n\n### Available OPs:\n  * ':' for equality\n  * '!' for not\n  * '>' greater than\n  * '<' less than\n",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Person"
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/api/v1/profiles/{id}" : {
      "get" : {
        "tags" : [ "Profiles" ],
        "summary" : "Fetches the `profile` for id `id`.\n",
        "description" : "",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "schema" : {
              "$ref" : "#/definitions/Person"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Profiles" ],
        "summary" : "Updates a profile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "person",
          "description" : "The profile to update.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Person"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Updates the person"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Profiles" ],
        "summary" : "Deletes a profile",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Updates the person."
          },
          "500" : {
            "description" : "Error deleting the profile \"ID\"."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/api/v1/socialservice" : {
      "get" : {
        "tags" : [ "SocialService" ],
        "summary" : "Gets all SocailService entries.\n",
        "description" : "Gets all SocailService entries.\nOptional query param of **size** determines\nsize of return array\n",
        "parameters" : [ {
          "name" : "size",
          "in" : "query",
          "description" : "Maximum number of items to fetch.\nIf unset then all items are fetched.\n",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/News"
              }
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "SocialService" ],
        "summary" : "Posts a new social service entry.\n",
        "description" : "Posts a new social service entry.\n",
        "parameters" : [ {
          "in" : "body",
          "name" : "SocialService",
          "description" : "The SocialService you want to post",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SocialService"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Makes a new SocialService"
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/api/v1/socialservice/{id}" : {
      "get" : {
        "tags" : [ "SocialService" ],
        "summary" : "Gets a social service entry.",
        "description" : "Retrives a SocialService entry\n",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Sucussful deletion",
            "schema" : {
              "$ref" : "#/definitions/SocialService"
            }
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "SocialService" ],
        "summary" : "The SocialService to update\n",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "socialservice",
          "description" : "The SocialService item you want to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SocialService"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Deletes SocialService"
          },
          "500" : {
            "description" : "Error with deleting SocialService by id."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "SocialService" ],
        "summary" : "The SocialService to delete\n",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the entry.",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Deletes SocialService"
          },
          "500" : {
            "description" : "Error with deleting SocialService by id."
          }
        },
        "security" : [ {
          "basicAuth" : [ ]
        } ]
      }
    },
    "/auth/forgot" : {
      "post" : {
        "tags" : [ "Reset" ],
        "summary" : "Sends a request for a new password\n",
        "description" : "Sends a request for a new password\n",
        "parameters" : [ {
          "name" : "email",
          "in" : "formData",
          "description" : "the email the user wants a new password for.",
          "required" : true,
          "type" : "string",
          "format" : "email"
        } ],
        "responses" : {
          "200" : {
            "description" : "request for new password sent.",
            "schema" : {
              "$ref" : "#/definitions/Reset"
            }
          },
          "500" : {
            "description" : "error requesting for a password"
          }
        }
      }
    },
    "/auth/reset" : {
      "post" : {
        "tags" : [ "Reset" ],
        "summary" : "Resets a password.\n",
        "description" : "Resets a password.\n",
        "parameters" : [ {
          "name" : "email",
          "in" : "formData",
          "description" : "the email the user wants a new password for.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "token",
          "in" : "formData",
          "description" : "the unique password token generated for the user.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "newPassword",
          "in" : "formData",
          "description" : "the new password the user wnats to set.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful resetting of the password.",
            "schema" : {
              "$ref" : "#/definitions/Reset"
            }
          },
          "500" : {
            "description" : "error setting new password"
          }
        }
      }
    },
    "/newuser" : {
      "post" : {
        "tags" : [ "User" ],
        "summary" : "Creates a new user in the system\n",
        "description" : "Creates a new user in the system\n",
        "parameters" : [ {
          "name" : "email",
          "in" : "formData",
          "description" : "The email address to use for the new person.",
          "required" : true,
          "type" : "string",
          "format" : "email"
        }, {
          "name" : "password",
          "in" : "formData",
          "description" : "the unencrypted password to use",
          "required" : true,
          "type" : "string",
          "format" : "password"
        } ],
        "responses" : {
          "200" : {
            "description" : "Creates a new person in the system."
          },
          "500" : {
            "description" : "An error creating the user."
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "basicAuth" : {
      "description" : "HTTP Basic Authentication. Works over `HTTP` and `HTTPS`.",
      "type" : "basic"
    }
  },
  "definitions" : {
    "SocialConnection" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        }
      }
    },
    "Person" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "student_id" : {
          "type" : "integer",
          "format" : "int32"
        },
        "title" : {
          "type" : "string"
        },
        "about_me" : {
          "type" : "string"
        },
        "resume_url" : {
          "type" : "string"
        },
        "image_url" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "phone" : {
          "type" : "string"
        },
        "occupation" : {
          "type" : "string"
        },
        "company_name" : {
          "type" : "string"
        },
        "birthdate" : {
          "type" : "string",
          "format" : "date"
        },
        "variety" : {
          "type" : "string"
        },
        "last_login_date" : {
          "type" : "string",
          "format" : "date"
        },
        "social_connections" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SocialConnection"
          }
        },
        "lang" : {
          "type" : "string"
        },
        "admin" : {
          "type" : "boolean"
        },
        "degree_major" : {
          "type" : "string"
        },
        "degree_minor" : {
          "type" : "string"
        },
        "graduation_year" : {
          "type" : "integer",
          "format" : "int32"
        },
        "degree_type" : {
          "type" : "string"
        },
        "faculty_department" : {
          "type" : "string"
        }
      }
    },
    "Job" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "description" : {
          "type" : "string"
        },
        "company" : {
          "type" : "string"
        },
        "job_type" : {
          "type" : "integer",
          "format" : "int64"
        },
        "title" : {
          "type" : "string"
        },
        "industry" : {
          "type" : "integer",
          "format" : "int64"
        },
        "location" : {
          "type" : "string"
        },
        "start_date" : {
          "type" : "string",
          "format" : "date"
        },
        "end_date" : {
          "type" : "string",
          "format" : "date"
        },
        "posted_by_person_id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "hours" : {
          "type" : "integer",
          "format" : "int64"
        },
        "posted_by" : {
          "$ref" : "#/definitions/Person"
        }
      }
    },
    "Language" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "News" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "title" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "posted" : {
          "type" : "string",
          "format" : "date"
        },
        "expired" : {
          "type" : "string",
          "format" : "date"
        },
        "posted_by" : {
          "$ref" : "#/definitions/Person"
        },
        "views" : {
          "type" : "integer",
          "format" : "int64"
        },
        "visible_to" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "comments" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NewsComment"
          }
        }
      }
    },
    "NewsComment" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "news_id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "text" : {
          "type" : "string"
        },
        "posted" : {
          "type" : "string",
          "format" : "date"
        },
        "posted_by" : {
          "$ref" : "#/definitions/Person"
        }
      }
    },
    "Reset" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string"
        },
        "token" : {
          "type" : "string"
        },
        "new_password" : {
          "type" : "string"
        }
      }
    },
    "PersonType" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "JobType" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "SocialService" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        }
      }
    },
    "FacultyRequest" : {
      "type" : "object",
      "properties" : {
        "notes" : {
          "type" : "string"
        }
      }
    },
    "AbuseRequest" : {
      "type" : "object",
      "properties" : {
        "item_type" : {
          "type" : "string"
        },
        "item_id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "notes" : {
          "type" : "string"
        }
      }
    },
    "Verdict" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "approved" : {
          "type" : "boolean"
        },
        "verdict_notes" : {
          "type" : "string"
        }
      }
    },
    "ApprovalRequest" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "active" : {
          "type" : "boolean"
        },
        "approval_type" : {
          "type" : "string"
        },
        "item_type" : {
          "type" : "string"
        },
        "item_id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "flagged_notes" : {
          "type" : "string"
        },
        "flagged_on" : {
          "type" : "string",
          "format" : "date"
        },
        "flagged_by" : {
          "$ref" : "#/definitions/Person"
        },
        "approved" : {
          "type" : "boolean"
        },
        "verdict_notes" : {
          "type" : "string"
        },
        "verdict_on" : {
          "type" : "string",
          "format" : "date"
        },
        "verdict_by" : {
          "$ref" : "#/definitions/Person"
        }
      }
    }
  },
  "parameters" : {
    "size" : {
      "name" : "size",
      "in" : "query",
      "description" : "Maximum number of items to fetch.\nIf unset then all items are fetched.\n",
      "required" : false,
      "type" : "integer",
      "format" : "int64"
    },
    "admin" : {
      "name" : "admin",
      "in" : "query",
      "description" : "**True** if this is an admin request. \nAdmin requests are only allowed to be specified\nby admin users.  If a non-admin attempts to specifify\none then a 403 will be returned.\n",
      "required" : false,
      "type" : "boolean"
    },
    "q" : {
      "name" : "q",
      "in" : "query",
      "description" : "## Basic query string.\n### Format:\n  ```?q=search terms```\n\n### Example:\n  ```?q=Oracle```\n",
      "required" : false,
      "type" : "string"
    },
    "aq" : {
      "name" : "aq",
      "in" : "query",
      "description" : "## Advanced query string.\n### Format:\n  ```?aq=(attribute OP term),...```\n\n### Example:\n  ```?aq=graduation_year>2000,occupation:manager```\n\n### Available OPs:\n  * ':' for equality\n  * '!' for not\n  * '>' greater than\n  * '<' less than\n",
      "required" : false,
      "type" : "string"
    },
    "id" : {
      "name" : "id",
      "in" : "path",
      "description" : "The ID of the entry.",
      "required" : true,
      "type" : "integer",
      "format" : "int64"
    }
  }
}