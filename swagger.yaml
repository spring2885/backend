# Spring2885 Backend API.
swagger: '2.0'

# This is your document metadata
info:
  version: "0.0.1"
  title: NDNU Community Access API
  description: An API for the Spring2885 FrontEnd.
  contact: 
    name: Spring2885 Backend Development Team
    email: team@spring-2885.org
    url: https://github.com/spring2885/backend
  

schemes:
  - http
  - https
securityDefinitions:
  basicAuth:
    type: basic
    description: HTTP Basic Authentication. Works over `HTTP` and `HTTPS`.

parameters:
  size:
    name: size
    in: query
    description: |
      Maximum number of items to fetch.
      If unset then all items are fetched.
    required: false
    type: integer
    format: int64
  admin:
    name: admin
    in: query
    description: |
      **True** if this is an admin request. 
      Admin requests are only allowed to be specified
      by admin users.  If a non-admin attempts to specifify
      one then a 403 will be returned.
    required: false
    type: boolean
  q:
    name: q
    in: query
    description: |
      ## Basic query string.
      ### Format:
        ```?q=search terms```

      ### Example:
        ```?q=Oracle```

    required: false
    type: string
  aq:
    name: aq
    in: query
    description: |
      ## Advanced query string.
      ### Format:
        ```?aq=(attribute OP term),...```

      ### Example:
        ```?aq=graduation_year>2000,occupation:manager```

      ### Available OPs:
        * ':' for equality
        * '!' for not
        * '>' greater than
        * '<' less than
    required: false
    type: string
  id:
    name: id
    in: path
    description: The ID of the entry.
    required: true
    type: integer
    format: int64

paths:
  /newuser:
    post:
      tags: ["User"]
      summary: |
        Creates a new user in the system
      description: |
        Creates a new user in the system
      parameters:
        - name: email
          in: formData
          description: The email address to use for the new person.
          required: true
          type: string
          format: email
        - name: password
          in: formData
          description: the unencrypted password to use
          required: true
          type: string
          format: password
      responses:
        200:
          description: Creates a new person in the system.
        500:
          description: An error creating the user.

  /auth/forgot:
    post:
      tags: ["Reset"]
      summary: |
        Sends a request for a new password
      description: |
        Sends a request for a new password
      parameters:
        - name: email
          in: formData
          description: the email the user wants a new password for.
          required: true
          type: string
          format: email
      responses:
        200:
          description: request for new password sent.
        500:
          description: error requesting for a password
  /auth/reset:
    post:
      tags: ["Reset"]
      summary: |
        Resets a password.
      description: |
        Resets a password.
      parameters:
        - name: email
          in: formData
          description: the email the user wants a new password for.
          required: true
          type: string
        - name: token
          in: formData
          description: the unique password token generated for the user.
          required: true
          type: string
        - name: newPassword
          in: formData
          description: the new password the user wnats to set.
          required: true
          type: string
      responses:
        200:
          description: Successful resetting of the password.
        500:
          description: error setting new password
          
  # This is the /profiles endpoint
  /api/v1/profiles:
    # This is a HTTP operation
    get:
      tags: ["Profiles"]
      security:
       - basicAuth: []
      summary: |
        Fetches all profiles
      description: |
        Fetches all `profile` objects. up to `size` if specified,
        otherwise fetches all objects.
      parameters:
        - $ref: '#/parameters/size'
        - $ref: '#/parameters/q'
        - $ref: '#/parameters/aq'
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            type: array
            items:
              $ref: '#/definitions/Person'

  /api/v1/profiles/{id}:
    get:
      tags: ["Profiles"]
      security:
       - basicAuth: []
      summary: |
        Fetches the `profile` for id `id`.
      description: |
      parameters:
        - $ref: '#/parameters/id'
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/Person'
    put:
      tags: ["Profiles"]
      security:
       - basicAuth: []
      summary: Updates a profile
      parameters:
        - $ref: '#/parameters/id'
        - name: person
          in: body
          description: The profile to update.
          schema:
            $ref: '#/definitions/Person'
          required: true
      responses:
        200:
          description: Updates the person
    delete:
      tags: ["Profiles"]
      security:
       - basicAuth: []
      summary: Deletes a profile
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Updates the person.
        500:
          description: Error deleting the profile "ID".

  /api/v1/news:
    get:
      tags: ["News"]
      security:
       - basicAuth: []
      summary: Fetches all news.
      description: |
        Gets `News` objects.
        Optional query param of **size** determines
        size of return array
      parameters:
        - $ref: '#/parameters/size'
        - $ref: '#/parameters/admin'
        - $ref: '#/parameters/q'
        - $ref: '#/parameters/aq'
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/News'
    post:
      tags: ["News"]
      security:
       - basicAuth: []
      summary: Posts new news entry.
      description: |
        Posts a new news entry.
      parameters:
        - name : News
          in: body
          description: The News you want to post
          schema:
            $ref: '#/definitions/News'
          required: true
      responses:
        200:
          description: Makes a new News 
  /api/v1/news/{id}:
    get:
      tags: ["News"]
      security:
       - basicAuth: []
      summary: Gets a news entry.
      description: |
        Retrives a news entry by id.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Sucussful deletion 
          schema:
            $ref: '#/definitions/News'
    delete:
      tags: ["News"]
      security:
       - basicAuth: []
      summary: Deletes a news entry.
      description: |
        Deletes a single news entry.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Deletes News
        500:
          description: Error with deleting News by id. 
    put:
      tags: ["News"]
      security:
       - basicAuth: []
      summary: Updates a news entry.
      description: |
        Updates a news entry.
      parameters:
        - $ref: '#/parameters/id'
        - name: news
          in: body
          description: The News item you want to update
          required: true
          schema:
            $ref: '#/definitions/News'
      responses:
        200:
          description: Updates News
        500:
          description: Error with updating News by id. 


  /api/v1/news_comment:
    post:
      tags: ["News"]
      security:
       - basicAuth: []
      summary: Posts a news comment.
      description: Posts a new news comment.
      parameters:
        - name : news_comment
          in: body
          description: The news comment you want to post
          schema:
            $ref: '#/definitions/NewsComment'
          required: true
      responses:
        200:
          description: Makes a new NewsComment 

  /api/v1/news_comment/{id}:
    get:
      tags: ["News"]
      security:
       - basicAuth: []
      summary: Gets a news comment.
      description: |
        Retrives the comments by id.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/NewsComment'
    delete:
      tags: ["News"]
      security:
       - basicAuth: []
      summary: Deletes a news comment.
      description: |
        Deletes a news comment by id.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Deletes News Comment
        500:
          description: Error with deleting News comment by id. 
    put:
      tags: ["News"]
      security:
       - basicAuth: []
      summary: Updates a news comment.
      description: |
        Updates a news comment by id.
      parameters:
        - $ref: '#/parameters/id'
        - name: news_comment
          in: body
          description: The News comment you want to update
          required: true
          schema:
            $ref: '#/definitions/NewsComment'
      responses:
        200:
          description: Updates the News Coment
        500:
          description: Error with updating News Comment by id. 

  /api/v1/jobs:
    get:
      tags: ["Jobs"]
      security:
       - basicAuth: []
      summary: Gets all job entries.
      description: |
        Gets `Job` entries.
        Optional query param of **size** determines
        size of returned array
      parameters:
        - $ref: '#/parameters/size'
        - $ref: '#/parameters/q'
        - $ref: '#/parameters/aq'
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/Job'
    post:
      tags: ["Jobs"]
      summary: Posts a new job entry.
      description: Posts a new job entry.
      security:
       - basicAuth: []
      parameters:
        - name: Job
          in: body
          description: The Job you want to post
          schema:
            $ref: '#/definitions/Job'
          required: true
      responses:
        200:
          description: Make a new Job

  /api/v1/jobs/{id}:
    get:
      tags: ["Jobs"]
      security:
       - basicAuth: []
      summary: Gets a job entry.
      description: |
        Gets a Job entry.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Job'
    put:
      tags: ["Jobs"]
      security:
       - basicAuth: []
      description: |
          Updates a job.
      summary: |
          Updates a job.
      parameters:
        - $ref: '#/parameters/id'
        - name: job
          in: body
          description: The Job you want to update
          required: true
          schema:
            $ref: '#/definitions/Job'
      responses:
        200:
          description: Updates the Job
    delete:
      tags: ["Jobs"]
      security:
       - basicAuth: []
      description: |
        Deletes a job entry.
      summary: |
        Deletes a job entry.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Updates the person.
        500:
          description: Error deleting the profile "ID".

  /api/v1/Language:
    get:
      tags: ["Language"]
      summary: gets a Language
      description: |
       retrieves a langauge based on a langauge code passed.
      responses:
        200:
          description: Sucessful response
          schema:
            type: array
            items:
              $ref: '#/definitions/Language'
        404:
          description: HttpStatus.NOT_FOUND
    put:
      tags: ["Language"]
      summary: adds a langauge
      description: |
        Adds a langauge based on a langauge code passed.
      parameters:
        - $ref: '#/parameters/size'
      responses:
        200:
          description: Sucessful response
          schema:
            type: array
            items:
              $ref: '#/definitions/Language'
        404:
          description: HttpStatus.NOT_FOUND
          
    post:
      tags: ["Language"]
      summary: adds a langauge
      description: |
        Adds a langauge based on a langauge code passed.
      parameters:
        - $ref: '#/parameters/size'
      responses:
        200:
          description: Sucessful response
          schema:
            type: array
            items:
              $ref: '#/definitions/Language'
        404:
          description: HttpStatus.NOT_FOUND
          
  /api/v1/socialservice:
    get:
      tags: ["SocialService"]
      security:
       - basicAuth: []
      summary: |
        Gets all SocailService entries.
      description: |
        Gets all SocailService entries.
        Optional query param of **size** determines
        size of return array
      parameters:
         - $ref: '#/parameters/size'
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/SocialService'
    post:
      tags: ["SocialService"]
      security:
       - basicAuth: []
      summary: |
        Posts a new social service entry.
      description: |
        Posts a new social service entry.
      parameters:
        - name : SocialService
          in: body
          description: The SocialService you want to post
          schema:
            $ref: '#/definitions/SocialService'
          required: true
      responses:
        200:
          description: Makes a new SocialService
  /api/v1/socialservice/{id}:
    get:
      tags: ["SocialService"]
      security:
       - basicAuth: []
      summary: Gets a social service entry.
      description: |
        Retrives a SocialService entry
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Sucussful deletion 
          schema:
            $ref: '#/definitions/SocialService'
    delete:
      tags: ["SocialService"]
      security:
       - basicAuth: []
      summary: Deletes a social service entry.
      description: |
        The SocialService to delete
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Deletes SocialService
        500:
          description: Error with deleting SocialService by id. 
    put:
      tags: ["SocialService"]
      security:
       - basicAuth: []
      summary: Updates a social service entry.
      description: |
        The SocialService to update
      parameters:
        - $ref: '#/parameters/id'
        - name: socialservice
          in: body
          description: The SocialService item you want to update
          required: true
          schema:
            $ref: '#/definitions/SocialService'
      responses:
        200:
          description: Deletes SocialService
        500:
          description: Error with deleting SocialService by id.

  /api/v1/persontype:
    get:
      tags: ["PersonType"]
      security:
       - basicAuth: []
      summary: |
        Fetches all persontype entries.
      description: |
        Fetches all 'person type' objects. up to a 'size' if specified,
        otherwise fetches all objects.
      parameters:
        - $ref: '#/parameters/size'
      responses:
        200:
          description: Gets persontypes
          schema:
            type: array
            items:
              $ref: '#/definitions/PersonType'  
        500:
          description: Error getting persontypes
    post:
      tags: ["PersonType"]
      summary: Creates a new persontype.
      description: Creates a new persontype entry.
      security:
       - basicAuth: []
      parameters:
        - name: PersonType
          in: body
          description: The persontype you want to post
          schema:
            $ref: '#/definitions/PersonType'
          required: true
      responses:
        200:
          description: Creates a new persontype in the system
        500:
          description: Error creating persontype.
        
  /api/v1/persontype/{id}:
    get:
      tags: ["PersonType"]
      security:
       - basicAuth: []
      summary: Gets a persontype entry.
      description:  Gets a persontype entry.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/PersonType'
        500:
          description: error getting persontype with id 'id'
    put:
      tags: ["PersonType"]
      security:
       - basicAuth: []
      summary: |
        Updates a persontype entry
      description: Updates a persontype entry.
      parameters:
        - $ref: '#/parameters/id'
        - name: name
          in: body
          description: The type to update.
          schema:
            $ref: '#/definitions/PersonType'
          required: true
      responses:
        200:
          description: Updates the persontype.
    delete:
      tags: ["PersonType"]
      security:
       - basicAuth: []
      summary: |
        Deletes a persontype entry.
      description: Deletes a persontype entry.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Deletes the persontype.
          schema:
            $ref: '#/definitions/PersonType'
        500:
          description: Error deleting the persontype "ID".
  
  /api/v1/jobtype:
    get:
      tags: ["JobType"]
      security:
       - basicAuth: []
      summary: Gets all jobtype entries.
      description: |
        Gets all JobType entries.
        Optional query param of **size** determines
        size of return array
      parameters:
        - $ref: '#/parameters/size'
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/JobType'  
    post:
      tags: ["JobType"]
      security:
       - basicAuth: []
      summary: Creates a new jobtype.
      description: Creates a new JobType entry.
      parameters:
        - name : JobType
          in: body
          description: The JobType you want to post
          schema:
            $ref: '#/definitions/JobType'
          required: true
      responses:
        200:
          description: Makes a new JobType 
  
  /api/v1/jobtype/{id}:
    get:
      tags: ["JobType"]
      security:
       - basicAuth: []
      summary: |
        Gets a jobtype entry.
      description: Gets a jobtype entry by id.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Sucussful deletion 
          schema:
            $ref: '#/definitions/JobType'
    delete:
      tags: ["JobType"]
      security:
       - basicAuth: []
      summary: |
        Deletes a jobtype entry.
      description: Delete a jobtype entry by id.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: Deletes jobtype
        500:
          description: Error with deleting jobtype by id. 
    put:
      tags: ["JobType"]
      security:
       - basicAuth: []
      summary: Updates a jobtype entry.
      description: Updates a jobtype entry by id.
      parameters:
        - $ref: '#/parameters/id'
        - name: jobtype
          in: body
          description: The jobtype item you want to update
          required: true
          schema:
            $ref: '#/definitions/JobType'
      responses:
        200:
          description: Deletes jobtype
        500:
          description: Error with deleting jobtype by id. 

  /api/v1/approvals/request/abuse:
    post:
      tags: ["Approvals"]
      security:
       - basicAuth: []
      summary: Flags an item as abuse.
      description: Submits a request to flag an item as abuse.
      parameters:
        - name : AbuseRequest
          in: body
          description: The faculty request.
          schema:
            $ref: '#/definitions/AbuseRequest'
          required: true
      responses:
        200:
          description: Submits abuse request.
  /api/v1/approvals/request/faculty:
    post:
      tags: ["Approvals"]
      security:
       - basicAuth: []
      summary: Requests approval as faculty
      description: Submits a request for an admin to approve this member as a faculty.
      parameters:
        - name : FacultyRequest
          in: body
          description: The faculty request.
          schema:
            $ref: '#/definitions/FacultyRequest'
          required: true
      responses:
        200:
          description: Submits faculty request.
  /api/v1/approvals/verdict:
    post:
      tags: ["Approvals"]
      security:
       - basicAuth: []
      summary: Submits a verdict on an approval request.
      description: Submits a verdict on a previously submitted approval request.
      parameters:
        - name : Verdict
          in: body
          description: The verdict.
          schema:
            $ref: '#/definitions/Verdict'
          required: true
      responses:
        200:
          description: Submits verdict.
  /api/v1/approvals/list:
    get:
      tags: ["Approvals"]
      security:
       - basicAuth: []
      summary: Lists approvals.
      description: Lists all approval requests. Optionally filtered by state and type.
      parameters:
        - name: state
          in: query
          description: The state of the request. Either *open* or *closed*
          required: false
          type: string
        - name: type
          in: query
          description: The type of the request. Either *FACULTY* or *ABUSE*
          required: false
          type: string
      responses:
        200:
          description: Submits verdict.

definitions:
  SocialConnection:
    type: object
    properties:
      name:
        type: string
      url:
        type: string

  Person:
    type: object
    properties:
      id: 
        type: integer
        format: int64
      name:
        type: string
      student_id:
        type: integer
        format: int32
      title:
        type: string
      about_me:
        type: string
      resume_url:
        type: string
      image_url:
        type: string
      email: 
        type: string
      occupation:
        type: string
      company_name:
        type: string
      variety:
        type: string #as in alum, faculty, student
      last_login_date:
        type: string
        format: date-time
      social_connections:
        type: array
        items:
          $ref: '#/definitions/SocialConnection'
      lang:
        type: string
      admin:
        type: boolean
      # student fields
      degree_major:
        type: string
      degree_minor:
        type: string
      graduation_year:
        type: integer
        format: int32
      degree_type:
        type: string
      # faculty only fields
      faculty_department:
        type: string
  Job:
    type: object
    properties:
      id: 
        type: integer
        format: int64
      description:
        type: string
      company:
        type: string
      job_type:
        type: integer
        format: int64
      title: 
        type: string
      industry:
        type: integer
        format: int64
      location:
        type: string
      start_date:
        type: string
        format: date-time
      end_date:
        type: string
        format: date-time
      hours:
        type: integer
        format: int64
      posted_by:
        type: object
        $ref: '#/definitions/Person'

  Language:
    type: object
    properties:
      code:
        type: string
      description:
        type: string
  News:
    type: object
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
      description:
        type: string
      posted:
        type: string
        format: date-time
      expired:
        type: string
        format: date-time
      posted_by:
        type: object
        $ref: '#/definitions/Person'
      views:
        type: integer
        format: int64
      visible_to:
        type: array
        items:
          type: string
      comments:
          type: array
          items:
            $ref: '#/definitions/NewsComment'

  NewsComment:
    type: object
    properties:
      id:
        type: integer
        format: int64
      news_id:
        type: integer
        format: int64
      text:
        type: string
      posted:
        type: string
        format: date-time
      posted_by:
        type: object
        $ref: '#/definitions/Person'

  PersonType:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  
  JobType:
    type: object
    properties: 
      id:
        type: integer
        format: int64
      name:
        type: string

  SocialService:
    type: object
    properties:
      id: 
        type: string
      url:
        type: string 

  FacultyRequest:
    type: object
    properties:
      notes:
        type: string

  AbuseRequest:
    type: object
    properties:
      item_type:
        type: string
      item_id:
        type: integer
        format: int64
      item_url:
        type: string
      notes:
        type: string

  Verdict:
    type: object
    properties:
      id:
        type: string
      approved:
        type: boolean
      verdict_notes:
        type: string

  ApprovalRequest:
    type: object
    properties:
      id:
        type: string
      active:
        type: boolean
      approval_type:
        type: string
      item_type:
        type: string
      item_id:
        type: integer
        format: int64
      item_url:
        type: string
      flagged_notes:
        type: string
      flagged_on:
        type: string
        format: date-time
      flagged_by:
        type: object
        $ref: '#/definitions/Person'
      approved:
        type: boolean
      verdict_notes:
        type: string
      verdict_on:
        type: string
        format: date-time
      verdict_by:
        type: object
        $ref: '#/definitions/Person'

tags:
  - name: User
    description: User API (internal)
  - name: Profiles
    description: Profiles API.
  - name: Reset
    description: Password reset API.
  - name: Jobs
    description: Jobs API.
  - name: JobType
    description: JobType API (Admin).
  - name: News
    description: News API.
  - name: SocialService
    description: SocialService API (Admin).
  - name: PersonType
    description: Person Type API (Admin).
  - name: Approvals
    description: Approvals API (Admin)
