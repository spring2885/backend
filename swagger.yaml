# Spring2885 Backend API.
swagger: '2.0'

# This is your document metadata
info:
  version: "0.0.1"
  title: NDNU Community Access API
  description: An API for the Spring2885 FrontEnd.
  contact: 
    name: Spring2885 Backend Development Team
    email: team@spring-2885.org
    url: https://github.com/spring2885/backend
  

# Describe your paths here
paths:
  /newuser:
    post:
      tags: ["User"]
      description: |
        Creates a new user in the system
      description: |
      parameters:
        - name: email
          in: formData
          description: The email address to use for the new person.
          required: true
          type: string
          format: email
        - name: password
          in: formData
          description: the unencrypted password to use
          required: true
          type: string
          format: password
      responses:
        200:
          description: Creates a new person in the system.
        500:
          description: An error creating the user.

  /auth/forgot:
    post:
      tags: ["Reset"]
      description: |
        sends a request for a new password
      parameters:
        - name: email
          in: formData
          description: the email the user wants a new password for.
          required: true
          type: string
          format: email
      responses:
        200:
          description: request for new password sent.
          schema:
            $ref: '#/definitions/Reset'
        500:
          description: error requesting for a password
  /auth/reset:
    post:
      tags: ["Reset"]
      description: |
        setting new password for users email
      parameters:
        - name: email
          in: formData
          description: the email the user wants a new password for.
          required: true
          type: string
        - name: token
          in: formData
          description: the unique password token generated for the user.
          required: true
          type: string
        - name: newPassword
          in: formData
          description: the new password the user wnats to set.
          required: true
          type: string
      responses:
        200:
          description: new password set.
          schema:
            $ref: '#/definitions/Reset'
        500:
          description: error setting new password
          
  # This is the /profiles endpoint
  /api/v1/profiles:
    # This is a HTTP operation
    get:
      tags: ["Profiles"]
      summary: |
        Fetches all `profile` objects
      description: |
        Fetches all `profile` objects. up to `size` if specified,
        otherwise fetches all objects.
      parameters:
        - name: size
          in: query
          description: The maxinum number of profiles to fetch.
          required: false
          type: number
          format: int32
        - name: q
          in: query
          description: |
            ## Basic query string.
            ### Format:
              ```?q=search terms```

            ### Example:
              ```?q=Oracle```

          required: false
          type: string
        - name: aq
          in: query
          description: |
            ## Advanced query string.
            ### Format:
              ```?aq=(attribute OP term),...```

            ### Example:
              ```?aq=graduation_year>2000,occupation:manager```

            ### Available OPs:
              * ':' for equality
              * '!' for not
              * '>' greater than
              * '<' less than
          required: false
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            type: array
            items:
              $ref: '#/definitions/Person'

  /api/v1/profiles/{id}:
    get:
      tags: ["Profiles"]
      summary: |
        Fetches the `profile` for id `id`.
      description: |
      parameters:
        - name: id
          in: path
          description: The ID of the profile to fetch
          required: true
          type: number
          format: int32
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/Person'
    put:
      tags: ["Profiles"]
      summary: |
          The profile to update.
      parameters:
        - name: id
          in: path
          description: The ID of the profile to fetch
          required: true
          type: number
          format: int32
        - name: person
          in: body
          description: The profile to update.
          schema:
            $ref: '#/definitions/Person'
          required: true
      responses:
        200:
          description: Updates the person
    delete:
      tags: ["Profiles"]
      summary: |
        The profile to delete.
      parameters:
        - name: id
          in: path
          description: The profile to delete.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Updates the person.
        500:
          description: Error deleting the profile "ID".

  /api/v1/news:
    get:
      tags: ["News"]
      description: |
        Gets `News` objects.
        Optional querry param of **size** determines
        size of return array
      parameters:
        - name: size
          in: query
          description: Size of array
          required: false
          type: number
          format: int32
        - name: admin
          in: query
          description: |
            True if this is an admin request. 
            Admin requests are only allowed to be specified
            by admin users.  If a non-admin attempts to specifify
            one then a 403 will be returned.
          required: false
          type: boolean
        - name: q
          in: query
          description: |
            ## Basic query string.
            ### Format:
              ```?q=search terms```

            ### Example:
              ```?q=Oracle```

          required: false
          type: string
        - name: aq
          in: query
          description: |
            ## Advanced query string.
            ### Format:
              ```?aq=(attribute OP term),...```

            ### Example:
              ```?aq=graduation_year>2000,occupation:manager```

            ### Available OPs:
              * ':' for equality
              * '!' for not
              * '>' greater than
              * '<' less than
          required: false
          type: string
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/News'
    post:
      tags: ["News"]
      description: |
      parameters:
        - name : News
          in: body
          description: The News you want to post
          schema:
            $ref: '#/definitions/News'
          required: true
      responses:
        200:
          description: Makes a new News 
  /api/v1/news/{id}:
    get:
      tags: ["News"]
      description: |
        Retrives a News entry
      parameters:
        - name: id
          in: path
          description: a single News entry
          required: true
          type: number
          format: int64
      responses:
        200:
          description: Sucussful deletion 
          schema:
            $ref: '#/definitions/News'
    delete:
      tags: ["News"]
      summary: |
        The News to delete
      parameters:
        - name: id
          in: path
          description: The News to be deleted.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Deletes News
        500:
          description: Error with deleting News by id. 
    put:
      tags: ["News"]
      summary: |
        The News to update
      parameters:
        - name: id
          in: path
          description: The id of the News to be update.
          required: true
          type: integer
          format: int64
        - name: news
          in: body
          description: The News item you want to update
          required: true
          schema:
            $ref: '#/definitions/News'
          required: true
      responses:
        200:
          description: Deletes News
        500:
          description: Error with deleting News by id. 

  /api/v1/jobs:
    get:
      tags: ["Jobs"]
      description: |
        Gets `Job` objects.
        Optional query param of **size** determines
        size of returned array
      # This is array of GET operation parameters:
      parameters:
        # An example parameter that is in query and is required
        -
          name: size
          in: query
          description: Size of array
          required: false
          type: number
          format: double
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            type: array
            items:
              $ref: '#/definitions/Job'
    post:
      tags: ["Jobs"]
      parameters:
        - name: Job
          in: body
          description: The Job you want to post
          schema:
            $ref: '#/definitions/Job'
          required: true
      responses:
        200:
          description: Make a new Job

  /api/v1/jobs/{id}:
    get:
      tags: ["Jobs"]
      summary: |
        Fetches the `job` for id `id`.
      description: |
        Gets `Job` objects.
        Optional query param of **size** determines
        size of returned array
      parameters:
        - name: id
          in: path
          description: The ID of the job to fetch
          required: true
          type: number
          format: int64
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/Job'
    put:
      tags: ["Jobs"]
      summary: |
          The job to update.
      parameters:
        - name: id
          in: path
          description: The id of the Job you want to update
          required: true
          type: number
          format: in64
        - name: job
          in: body
          description: The Job you want to update
          required: true
          schema:
            $ref: '#/definitions/Job'
          required: true
      responses:
        200:
          description: Updates the Job
    delete:
      tags: ["Jobs"]
      summary: |
        The job to delete.
      parameters:
        - name: id
          in: path
          description: The job to delete.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Updates the person.
        500:
          description: Error deleting the profile "ID".

  
  /api/v1/socialservice:
    get:
      tags: ["SocialService"]
      description: |
        Gets `SocailService` objects.
        Optional querry param of **size** determines
        size of return array
      parameters:
        - name: size
          in: query
          description: Size of array
          required: false
          type: string
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/News'
    post:
      tags: ["SocialService"]
      description: |
      parameters:
        - name : SocialService
          in: body
          description: The SocialService you want to post
          schema:
            $ref: '#/definitions/SocialService'
          required: true
      responses:
        200:
          description: Makes a new SocialService
  /api/v1/socialservice/{id}:
    get:
      tags: ["SocialService"]
      description: |
        Retrives a SocialService entry
      parameters:
        - name: id
          in: path
          description: a single SocialService entry
          required: true
          type: string
      responses:
        200:
          description: Sucussful deletion 
          schema:
            $ref: '#/definitions/SocialService'
    delete:
      tags: ["SocialService"]
      summary: |
        The SocialService to delete
      parameters:
        - name: id
          in: path
          description: The SocialService to be deleted.
          required: true
          type: string
      responses:
        200:
          description: Deletes SocialService
        500:
          description: Error with deleting SocialService by id. 
    put:
      tags: ["SocialService"]
      summary: |
        The SocialService to update
      parameters:
        - name: id
          in: path
          description: The id of the News to be update.
          required: true
          type: string
        - name: socialservice
          in: body
          description: The SocialService item you want to update
          required: true
          schema:
            $ref: '#/definitions/SocialService'
          required: true
      responses:
        200:
          description: Deletes SocialService
        500:
          description: Error with deleting SocialService by id.

  /api/v1/persontype:
    get:
      tags: ["PersonType"]
      summary: |
        Fetches all 'persontype' objects
      description: |
        Fetches all 'person type' objects. up to a 'size' if specified,
        otherwise fetches all objects.
      parameters:
        - name: size
          in: query
          description: The maximum number of persontypes to fetch
          required: false
          type: number
          format: int32
      responses:
        200:
          description: Gets persontypes
          schema:
            type: array
            items:
              $ref: '#/definitions/PersonType'  
        500:
          description: Error getting persontypes
    post:
      tags: ["PersonType"]
      parameters:
        - name: PersonType
          in: body
          description: The persontype you want to post
          schema:
            $ref: '#/definitions/PersonType'
          required: true
      responses:
        200:
          description: Creates a new persontype in the system
        500:
          description: Error creating persontype.
        
  /api/v1/persontype/{id}:
    get:
      tags: ["PersonType"]
      summary: |
        Fetches the 'person type' for id 'id'.
      description: |
      parameters:
        - name: id
          in: path
          description: The id of the person type to fetch
          required: true
          type: number
          format: int32
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/PersonType'
        500:
          description: error getting persontype with id 'id'
    put:
      tags: ["PersonType"]
      summary: |
        The persontype to update
      parameters:
        - name: id
          in: path
          description: the id of the persontype to fetch.
          required: true
          type: number
          format: int32
        - name: name
          in: body
          description: The type to update.
          schema:
            $ref: '#/definitions/PersonType'
          required: true
      responses:
        200:
          description: Updates the persontype.
    delete:
      tags: ["PersonType"]
      summary: |
        The persontype to delete.
      parameters:
        - name: id
          in: path
          description: The persontype to delete.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Deletes the persontype.
          schema:
            $ref: '#/definitions/PersonType'
        500:
          description: Error deleting the persontype "ID".
  
  /api/v1/jobtype:
    get:
      tags: ["JobType"]
      description: |
        Gets `JobType` objects.
        Optional querry param of **size** determines
        size of return array
      parameters:
        - name: size
          in: query
          description: Size of array
          required: false
          type: number
          format: int32
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/JobType'  
    post:
      tags: ["JobType"]
      description: |
      parameters:
        - name : JobType
          in: body
          description: The JobType you want to post
          schema:
            $ref: '#/definitions/JobType'
          required: true
      responses:
        200:
          description: Makes a new JobType 
  
  /api/v1/jobtype/{id}:
    get:
      tags: ["JobType"]
      description: |
        Retrives a jobtype entry
      parameters:
        - name: id
          in: path
          description: a single jobtype entry
          required: true
          type: number
          format: int64
      responses:
        200:
          description: Sucussful deletion 
          schema:
            $ref: '#/definitions/JobType'
    delete:
      tags: ["JobType"]
      summary: |
        The jobtype to delete
      parameters:
        - name: id
          in: path
          description: The jobtype to be deleted.
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Deletes jobtype
        500:
          description: Error with deleting jobtype by id. 
    put:
      tags: ["JobType"]
      summary: |
        The jobtype to update
      parameters:
        - name: id
          in: path
          description: The id of the News to be update.
          required: true
          type: integer
          format: int64
        - name: jobtype
          in: body
          description: The jobtype item you want to update
          required: true
          schema:
            $ref: '#/definitions/JobType'
          required: true
      responses:
        200:
          description: Deletes jobtype
        500:
          description: Error with deleting jobtype by id. 
          
definitions:
  SocialConnection:
    type: object
    properties:
      name:
        type: string
      url:
        type: string

  Person:
    type: object
    properties:
      id: 
        type: integer
        format: int64
      name:
        type: string
      student_id:
        type: integer
        format: int32
      title:
        type: string
      about_me:
        type: string
      resume_url:
        type: string
      image_url:
        type: string
      email: 
        type: string
      phone:
        type: string
      occupation:
        type: string
      company_name:
        type: string
      birthdate:
        type: string
        format: date
      variety:
        type: string #as in alum, faculty, student
      last_login_date:
        type: string
        format: date
      social_connections:
        type: array
        items:
          $ref: '#/definitions/SocialConnection'
      lang:
        type: string
      # student fields
      degree_major:
        type: string
      degree_minor:
        type: string
      graduation_year:
        type: integer
        format: int32
      degree_type:
        type: string
      # faculty only fields
      faculty_department:
        type: string
  Job:
    type: object
    properties:
      id: 
        type: integer
        format: int64
      description:
        type: string
      job_type:
        format: int64
      title: 
        type: string
      industry:
        format: int64
      location:
        type: string
      start_date:
        type: string
        format: date
      end_date:
        type: string
        format: date
      posted_by_person_id:
        format: int64
      hours:
        format: int64

  Language:
    type: object
    properties:
      code:
        type: string
      description:
        type: string
  News:
    type: object
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
      description:
        type: string
      posted:
        type: string
        format: date
      expired:
        type: string
        format: date
      posted_by:
        type: string
        format: email
      views:
        type: integer
        format: int64
      visible_to:
        type: array
        items:
          type: string
  Reset:
    type: object
    properties:
      email:
        type: string
      token:
        type: string
      new_password:
        type: string

  PersonType:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  
  JobType:
    type: object
    properties: 
      id:
        type: integer
        format: int64
      name:
        type: string

  SocialService:
    type: object
    properties:
      id: 
        type: string
      url:
        type: string 
  Language:
	type: object
	properties:
		
tags:
  - name: User
    description: Everything to do with User
  - name: Profiles
    description: Fetch, Delete, and update Profiles
  - name: Reset
    description: Everything used for resetting password
  - name: Jobs
    description: Everything to do with Jobs
  - name: News
    description: Everything to do with News
  - name: SocialService
    description: Everything to do with SocialService
  - name: PersonType
    description: Everything to do with Person Type
